[tool.poetry]
name = "backend"
version = "0.1.0"
description = ""
authors = ["rjeby <yassine.rjeb@grenoble-inp.org>"]
readme = "README.md"
packages = [{include = "src/"}]

[tool.poetry.dependencies]
python = "^3.10"
flask = "^3.0.3"
flask-marshmallow = "^1.2.1"
flask-sqlalchemy = "^3.1.1"
marshmallow = "^3.21.3"
marshmallow-sqlalchemy = "^1.0.0"
sqlalchemy = "^2.0.30"
psycopg2-binary = "^2.9.9"
flask-restx = "^1.3.0"
flask-jwt-extended = "^4.6.0"
flask-cors = "^4.0.1"
bcrypt = "^4.1.3"
flask-mail = "^0.10.0"
pandas = "^2.2.2"
gunicorn = "^22.0.0"


[tool.poetry.group.dev.dependencies]
taskipy = "^1.13.0"
ruff = "^0.5.0"
bandit = "^1.7.9"
black = "^24.4.2"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"

[tool.bandit]
targets = ["src/"]

[tool.ruff.lint]
select = ["ALL"]
ignore = ["ANN", "BLE", "COM", "D", "E", "F", "FA", "FIX", "G", "I", "N", "PD", "PLR", "TD", "TRY", "W"]

[tool.pytest.ini_options]
pythonpath = "src/"

[tool.taskipy.tasks]
run_app = { cmd = "python src/app.py", help = "Runs the main application" }
code_quality_scan = { cmd = "ruff check src/", help = "Runs the Ruff code quality scan" }
security_scan = { cmd = "bandit -c pyproject.toml -r .", help = "Runs the Bandit security scan" }
code_formatting = { cmd = "black src/", help = "Runs the Black code formatter"}
coverage = { cmd = "pytest --cov=src", help = "Runs the PyTest code coverage"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
